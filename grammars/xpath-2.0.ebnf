/* XML Path Language (XPath) 2.0 (Second Edition)
 * version http://www.w3.org/TR/2010/REC-xpath20-20101214/
 * extracted from http://www.w3.org/TR/xpath20/ on Sat Mar 11, 2017, 16:55 (UTC+01)
 * with http://www.bottlecaps.de/rr/ui
 */

XPath    ::= Expr
Expr     ::= ExprSingle ("," ExprSingle)*
ExprSingle
         ::= ForExpr
           | QuantifiedExpr
           | IfExpr
           | OrExpr
ForExpr  ::= SimpleForClause "return" ExprSingle
SimpleForClause
         ::= "for" "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)*
QuantifiedExpr
         ::= ("some" | "every") "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)* "satisfies" ExprSingle
IfExpr   ::= "if" "(" Expr ")" "then" ExprSingle "else" ExprSingle
OrExpr   ::= AndExpr ( "or" AndExpr )*
AndExpr  ::= ComparisonExpr ( "and" ComparisonExpr )*
ComparisonExpr
         ::= RangeExpr ( (ValueComp
           | GeneralComp
           | NodeComp) RangeExpr )?
RangeExpr
         ::= AdditiveExpr ( "to" AdditiveExpr )?
AdditiveExpr
         ::= MultiplicativeExpr ( ("+" | "-") MultiplicativeExpr )*
MultiplicativeExpr
         ::= UnionExpr ( ("*" | "div" | "idiv" | "mod") UnionExpr )*
UnionExpr
         ::= IntersectExceptExpr ( ("union" | "|") IntersectExceptExpr )*
IntersectExceptExpr
         ::= InstanceofExpr ( ("intersect" | "except") InstanceofExpr )*
InstanceofExpr
         ::= TreatExpr ( "instance" "of" SequenceType )?
TreatExpr
         ::= CastableExpr ( "treat" "as" SequenceType )?
CastableExpr
         ::= CastExpr ( "castable" "as" SingleType )?
CastExpr ::= UnaryExpr ( "cast" "as" SingleType )?
UnaryExpr
         ::= ("-" | "+")* ValueExpr
ValueExpr
         ::= PathExpr
GeneralComp
         ::= "=" | "!=" | "<" | "<=" | ">" | ">="
ValueComp
         ::= "eq" | "ne" | "lt" | "le" | "gt" | "ge"
NodeComp ::= "is" | "<<" | ">>"
PathExpr ::= ("/" RelativePathExpr?)
           | ("//" RelativePathExpr)
           | RelativePathExpr
          /* xgs: leading-lone-slash */
RelativePathExpr
         ::= StepExpr (("/" | "//") StepExpr)*
StepExpr ::= FilterExpr | AxisStep
AxisStep ::= (ReverseStep | ForwardStep) PredicateList
ForwardStep
         ::= (ForwardAxis NodeTest) | AbbrevForwardStep
ForwardAxis
         ::= ("child" "::")
           | ("descendant" "::")
           | ("attribute" "::")
           | ("self" "::")
           | ("descendant-or-self" "::")
           | ("following-sibling" "::")
           | ("following" "::")
           | ("namespace" "::")
AbbrevForwardStep
         ::= "@"? NodeTest
ReverseStep
         ::= (ReverseAxis NodeTest) | AbbrevReverseStep
ReverseAxis
         ::= ("parent" "::")
           | ("ancestor" "::")
           | ("preceding-sibling" "::")
           | ("preceding" "::")
           | ("ancestor-or-self" "::")
AbbrevReverseStep
         ::= ".."
NodeTest ::= KindTest | NameTest
NameTest ::= QName | Wildcard
Wildcard ::= "*"
           | (NCName ":" "*")
           | ("*" ":" NCName)
          /* ws: explicit */
FilterExpr
         ::= PrimaryExpr PredicateList
PredicateList
         ::= Predicate*
Predicate
         ::= "[" Expr "]"
PrimaryExpr
         ::= Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall
Literal  ::= NumericLiteral | StringLiteral
NumericLiteral
         ::= IntegerLiteral | DecimalLiteral | DoubleLiteral
VarRef   ::= "$" VarName
VarName  ::= QName
ParenthesizedExpr
         ::= "(" Expr? ")"
ContextItemExpr
         ::= "."
FunctionCall
         ::= QName "(" (ExprSingle ("," ExprSingle)*)? ")"
          /* xgs: reserved-function-names */
          /* gn: parens */
SingleType
         ::= AtomicType "?"?
SequenceType
         ::= ("empty-sequence" "(" ")")
           | (ItemType OccurrenceIndicator?)
OccurrenceIndicator
         ::= "?" | "*" | "+"
          /* xgs: occurrence-indicators */
ItemType ::= KindTest | ("item" "(" ")") | AtomicType
AtomicType
         ::= QName
KindTest ::= DocumentTest
           | ElementTest
           | AttributeTest
           | SchemaElementTest
           | SchemaAttributeTest
           | PITest
           | CommentTest
           | TextTest
           | AnyKindTest
AnyKindTest
         ::= "node" "(" ")"
DocumentTest
         ::= "document-node" "(" (ElementTest | SchemaElementTest)? ")"
TextTest ::= "text" "(" ")"
CommentTest
         ::= "comment" "(" ")"
PITest   ::= "processing-instruction" "(" (NCName | StringLiteral)? ")"
AttributeTest
         ::= "attribute" "(" (AttribNameOrWildcard ("," TypeName)?)? ")"
AttribNameOrWildcard
         ::= AttributeName | "*"
SchemaAttributeTest
         ::= "schema-attribute" "(" AttributeDeclaration ")"
AttributeDeclaration
         ::= AttributeName
ElementTest
         ::= "element" "(" (ElementNameOrWildcard ("," TypeName "?"?)?)? ")"
ElementNameOrWildcard
         ::= ElementName | "*"
SchemaElementTest
         ::= "schema-element" "(" ElementDeclaration ")"
ElementDeclaration
         ::= ElementName
AttributeName
         ::= QName
ElementName
         ::= QName
TypeName ::= QName

<?TOKENS?>

IntegerLiteral
         ::= Digits
DecimalLiteral
         ::= ("." Digits) | (Digits "." [0-9]*)
          /* ws: explicit */
DoubleLiteral
         ::= (("." Digits) | (Digits ("." [0-9]*)?)) [eE] [+-]? Digits
          /* ws: explicit */
StringLiteral
         ::= ('"' (EscapeQuot | [^"])* '"') | ("'" (EscapeApos | [^'])* "'")
          /* ws: explicit */
EscapeQuot
         ::= '""'
EscapeApos
         ::= "''"
Comment  ::= "(:" (CommentContents | Comment)* ":)"
          /* ws: explicit */
          /* gn: comments */
QName    ::= [http://www.w3.org/TR/REC-xml-names/#NT-QName]
          /* xgs: xml-version */
NCName   ::= [http://www.w3.org/TR/REC-xml-names/#NT-NCName]
          /* xgs: xml-version */
Char     ::= [http://www.w3.org/TR/REC-xml#NT-Char]
          /* xgs: xml-version */
Digits   ::= [0-9]+
CommentContents
         ::= (Char+ - (Char* ('(:' | ':)') Char*))
